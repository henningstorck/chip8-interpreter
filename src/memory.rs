use crate::window::{HEIGHT_HI_RES, WIDTH_HI_RES};

const CHIP8_RAM: usize = 1024 * 32;
const CHIP8_VRAM: usize = WIDTH_HI_RES * HEIGHT_HI_RES;

pub const FONT_SET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub const FONT_SET_SUPER_CHIP: [u8; 160] = [
    0xFF, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, // 0
    0x18, 0x78, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF, // 1
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // 2
    0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 3
    0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0x03, 0x03, // 4
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 5
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 6
    0xFF, 0xFF, 0x03, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, // 7
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, // 8
    0xFF, 0xFF, 0xC3, 0xC3, 0xFF, 0xFF, 0x03, 0x03, 0xFF, 0xFF, // 9
    0x7E, 0xFF, 0xC3, 0xC3, 0xC3, 0xFF, 0xFf, 0xC3, 0xC3, 0xC3, // A
    0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, 0xC3, 0xC3, 0xFC, 0xFC, // B
    0x3C, 0xFF, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0xFF, 0x3C, // C
    0xFC, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE, 0xFC, // D
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, // E
    0xFF, 0xFF, 0xC0, 0xC0, 0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, // F
];

pub struct Memory {
    ram: [u8; CHIP8_RAM],
    vram: [u8; CHIP8_VRAM],
}

impl Memory {
    pub fn new(super_chip: bool) -> Self {
        let mut ram = [0u8; CHIP8_RAM];
        let vram = [0u8; CHIP8_VRAM];

        for i in 0..FONT_SET.len() {
            ram[i] = FONT_SET[i];
        }

        if super_chip {
            for i in 0..FONT_SET_SUPER_CHIP.len() {
                ram[i + 80] = FONT_SET_SUPER_CHIP[i];
            }
        }

        Memory { ram, vram }
    }

    pub fn read_byte(&mut self, address: usize) -> u8 {
        self.ram[address]
    }

    pub fn write_byte(&mut self, address: usize, value: u8) {
        self.ram[address] = value;
    }

    pub fn read_word(&mut self, address: usize) -> u16 {
        (self.ram[address] as u16) << 8 | (self.ram[address + 1] as u16)
    }

    pub fn read_vram(&mut self, x: usize, y: usize) -> u8 {
        self.vram[x + y * WIDTH_HI_RES]
    }

    pub fn write_vram(&mut self, x: usize, y: usize, value: u8) {
        self.vram[x + y * WIDTH_HI_RES] = value;
    }

    pub fn xor_vram(&mut self, x: usize, y: usize, value: u8) {
        self.vram[x + y * WIDTH_HI_RES] ^= value;
    }
}
